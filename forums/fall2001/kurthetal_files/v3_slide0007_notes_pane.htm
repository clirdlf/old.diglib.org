<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">
<link id=Main-File rel=Main-File href="../kurthetal.htm">
<link rel=Preview href=preview.wmf>

<script>
<!--
if( window.name != "PPTNts" )
  parent.location.href = "../kurthetal.htm";
//-->
</script>
</head>

<body bgcolor=black text=white>

<table border=0 width="100%">
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face="Times New Roman" size=3>With those
  opportunities in mind, let’s look at aspects of our work with ENCompass so
  far that bear on how we can address mixed granularity across collections.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face="Times New Roman" size=3>This is the
  ENCompass Relationship Manager window, which uses two side-by-side expanding
  outlines, with repositories on the right and collections on the left.<span
  style="mso-spacerun: yes">  </span>As I mentioned, the separation of
  repositories from collections is important to our discussion today.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face="Times New Roman" size=3>On the
  repository side of the system, we can use repository-creation and
  metadata-loading scripts to import metadata records from a common file source
  with a common element set and store them as containers and objects within a
  repository.<span style="mso-spacerun: yes">  </span>The metadata element set
  code that governs how records are stored in a repository also governs the
  display of repository containers and objects as object records in the user
  interface.<span style="mso-spacerun: yes">  </span>Though you likely wouldn’t
  choose to, it’s possible to use a different element set code for each
  repository and in turn display records from each repository differently to
  users.<span style="mso-spacerun: yes">  </span>A less extreme, more scaleable
  approach would identify repositories whose records share characteristics such
  as granularity or format and use the metadata code structure to display
  objects in those repositories similarly.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face="Times New Roman" size=3>A couple of
  examples will suggest possibilities along these lines.<span
  style="mso-spacerun: yes">  </span>The repositories we’ve created so far
  include one that contains records for digitized pamphlets from the May
  Anti-Slavery Collection.<span style="mso-spacerun: yes">  </span>Another
  repository contains records for the 800-plus reference resources in the
  e-Reference Collection that are currently available through the Cornell
  Library Gateway.</font><br>
  </td>
 </tr>
</table>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-PRN24D4JK5"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-PRN24D4JK5');
</script>
</body>

</html>
